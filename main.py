import json

import requests

from AvengersModule import get_user_id, create_cache, edit_cache, get_cache, del_cache, create_cache1, edit_cache1, \
    get_cache1, del_cache1, create_model, edit_model, del_model, get_person_id
from FunctionsModule import backup, genlist, gensell, genhands, deepsearch, getvalue
from bot_password import bot

global st
global d
global hd
global nm
global mo
global se

"""–°–õ–û–í–ê–†–¨ –°–¢–û–†–ï–î–ñ –ò –î–ò–ö–¢"""


def json_save_d():
    with open('dict.json', 'w') as fp:
        json.dump(d, fp)


def json_load_d():
    global d
    with open('dict.json', 'r') as fp:
        d = json.load(fp)


def json_save_st():
    with open('storage.json', 'w') as fp:
        json.dump(st, fp)


def json_load_st():
    global st
    with open('storage.json', 'r') as fp:
        st = json.load(fp)


def json_save_hd():
    with open('hands.json', 'w') as fp:
        json.dump(hd, fp)


def json_load_hd():
    global hd
    with open('hands.json', 'r') as fp:
        hd = json.load(fp)


def json_save_nm():
    with open('names.json', 'w') as fp:
        json.dump(nm, fp)


def json_load_nm():
    global nm
    with open('names.json', 'r') as fp:
        nm = json.load(fp)


def json_save_se():
    with open('sell.json', 'w') as fp:
        json.dump(se, fp)


def json_load_se():
    global se
    with open('sell.json', 'r') as fp:
        se = json.load(fp)


def json_save_mo():
    with open('money.json', 'w') as fp:
        json.dump(mo, fp)


def json_load_mo():
    global mo
    with open('money.json', 'r') as fp:
        mo = json.load(fp)


def rusificate(line):
    for word in range(len(line)):
        for indeh in range(len(d['Rus_Flavours'])):
            if d['Flavours'][indeh] == line[word]:
                line[word] = d['Rus_Flavours'][indeh][1:]
                line_n = line[word].replace(")", "")
                line[word] = line_n


def rusificate_genlist(line):
    line = line.split()
    for word in range(len(line)):
        for indeh in range(len(d['Rus_Flavours'])):
            if d['Flavours'][indeh][:-1] == line[word]:
                line[word] = d['Rus_Flavours'][indeh][:-1]
    return ' '.join(line)


def rusificate_post(line):
    if line == list:
        ''.join(line)
    for indeh in range(len(d['Rus_Flavours'])):
        if d['Flavours'][indeh] == line:
            return d['Rus_Flavours'][indeh][:-1]


def rusificate_gencock(line):
    for word in range(len(line)):
        for indeh in range(len(d['Rus_Flavours'])):
            if d['Flavours'][indeh][:-1] in line[word]:
                line[word] = line[word].replace(d['Flavours'][indeh][:-1], d['Rus_Flavours'][indeh][:-1])


def post_take(m, amount_nm):
    name = nm[get_person_id(m)]
    taken_model = (list(hd[get_user_id(m)].keys())[-1])
    taken_flavour = (list(hd[get_user_id(m)][taken_model].keys())[-1])
    taken_flavour = rusificate_post(taken_flavour)
    taken_model = str(taken_model.replace('_', ' '))

    message = f'{name} –≤–∑—è–ª {amount_nm} {taken_model}{taken_flavour} —Å–æ —Å–∫–ª–∞–¥–∞.'
    requests.post(
        f'https://api.telegram.org/bot5293957385:AAGXrcOkHhcgQXGXkMzitKUcDUI4jDPcd-o/sendMessage?chat_id'
        f'=-1001448891024&text={message}')

    # hd[get_user_id(m)][get_cache(m)][get_cache1(m)] = hd[get_user_id(m)][get_cache(m)][get_cache1(m)] + int(m.text)
    return


# def post_sell(m):
#     name = nm[get_person_id(m)]
#     sold_model = (list(hd[get_user_id(m)].keys())[-1])
#     sold_flavour = (list(hd[get_user_id(m)][sold_model].keys())[-1])
#     amount_nm = str(hd[get_user_id(m)][sold_model].get(sold_flavour))
#     sold_flavour = rusificate_post(sold_flavour)
#     sold_model = str(sold_model.replace('_', ' '))
#
#     message = f'{name} –≤–∑—è–ª {amount_nm} {sold_model}{sold_flavour} —Å–æ —Å–∫–ª–∞–¥–∞.'
#     requests.post(
#         f'https://api.telegram.org/bot5293957385:AAGXrcOkHhcgQXGXkMzitKUcDUI4jDPcd-o/sendMessage?chat_id=-1001448891024&text={message}')

# hd[get_user_id(m)][get_cache(m)][get_cache1(m)] = hd[get_user_id(m)][get_cache(m)][get_cache1(m)] + int(m.text)
# return


json_load_d()
json_load_st()
json_load_hd()
json_load_nm()
json_load_mo()
json_load_se()

"""–ö–æ–º–∞–Ω–¥—ã!!!!"""


@bot.message_handler(commands=["start"])
def start_cm(m, ):
    del_cache(m)
    create_cache(m)
    edit_cache(m, m.text)
    msg = bot.send_message(m.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è.')
    bot.register_next_step_handler(msg, set_name)


def set_name(m):
    del_cache(m)
    create_cache(m)
    edit_cache(m, m.text)
    nm[f'{get_person_id(m)}'] = get_cache(m)
    json_save_nm()


@bot.message_handler(commands=["info"])
def info_cm(m, ):
    cock = []
    count = 0
    count_m = 0
    try:
        if se[get_user_id(m)] == {}:
            return
    except KeyError:
        bot.send_message(m.chat.id, '–í—ã –±—Ä–æ—É–∫.\nüôå –í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–¥–∞–≤–∞–ª–∏.')
        return

    for se_model in list(se[get_user_id(m)].keys()):
        for flavour in list(se[get_user_id(m)][se_model].keys()):
            val = se[get_user_id(m)][se_model][flavour]
            count += val
            line = se_model + flavour + str(val)
            cock.append(line)

    try:
        if mo[get_user_id(m)] == {}:
            return
    except KeyError:
        bot.send_message(m.chat.id, '–í—ã –±—Ä–æ—É–∫.\nüôå –í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–¥–∞–≤–∞–ª–∏.')
        return


    for mo_model in list(mo[get_user_id(m)].keys()):
        for flavour in list(mo[get_user_id(m)][mo_model].keys()):
            val = mo[get_user_id(m)][mo_model][flavour]
            count_m += val

    rusificate_gencock(cock)
    bot.send_message(m.chat.id,
                     f'–í—ã –ø—Ä–æ–¥–∞–ª–∏: \n{genhands(cock)}\nüíπ –í—Å–µ–≥–æ: {count} —à—Ç.\nüí∞ –í—Å–µ–≥–æ –≤—ã—Ä—É—á–∫–∏: {count_m}')
    hand_cm(m)


@bot.message_handler(commands=["hand"])
def hand_cm(m, ):
    cock = []
    count = 0
    try:
        if hd[get_user_id(m)] == {}:
            return
    except KeyError:
        bot.send_message(m.chat.id, '–í—ã –±—Ä–æ—É–∫.\nüôå –ù–∞ —Ä—É–∫–∞—Ö 0 —à—Ç.')
        return

    for hd_model in list(hd[get_user_id(m)].keys()):
        for flavour in list(hd[get_user_id(m)][hd_model].keys()):
            val = hd[get_user_id(m)][hd_model][flavour]
            count += val
            line = hd_model + flavour + str(val)
            cock.append(line)
    rusificate_gencock(cock)
    bot.send_message(m.chat.id, '–£ –≤–∞—Å –Ω–∞ —Ä—É–∫–∞—Ö:\n' + genhands(cock) + '\nüôå –í—Å–µ–≥–æ –Ω–∞ —Ä—É–∫–∞—Ö: ' + str(count) + ' —à—Ç.')


@bot.message_handler(commands=["stats"])
def stats_cm(m, ):
    hands = 0
    storage = 0

    if hd == {}:
        h_line = '–í—Å–µ —Ä—É—á–∫–∏ –ø—É—Å—Ç—ã!'
    else:
        for hd_id in list(hd.keys()):
            for st_model in list(hd[hd_id].keys()):
                for flavour in list(hd[hd_id][st_model].keys()):
                    val = hd[hd_id][st_model][flavour]
                    hands += val
        h_line = 'üôå–í—Å–µ–≥–æ –Ω–∞ —Ä—É–∫–∞—Ö: ' + str(hands) + ' —à—Ç.\n'

    if st == {}:
        st_line = '–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç!'
    else:
        for st_model in list(st.keys()):
            for flavour in list(st[st_model].keys()):
                val1 = st[st_model][flavour]
                storage += val1
        st_line = 'üñäÔ∏è–í—Å–µ–≥–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: ' + str(storage) + ' —à—Ç.\n'

    count = 0
    count_m = 0
    try:
        if se == {}:
            return
    except KeyError:
        bot.send_message(m.chat.id, '–ú—ã –±–∞–Ω–∫–æ—Ç—ã.')
        return

    for se_id in list(se.keys()):
        for se_model in list(se[se_id].keys()):
            for flavour in list(se[se_id][se_model].keys()):
                val = se[se_id][se_model][flavour]
                count += val

    try:
        if mo == {}:
            return
    except KeyError:
        bot.send_message(m.chat.id, '–ú—ã –±–∞–Ω–∫—Ä–æ—Ç—ã.')
        return

    for mo_id in list(mo.keys()):
        for mo_model in list(mo[mo_id].keys()):
            for flavour in list(mo[mo_id][mo_model].keys()):
                val = mo[mo_id][mo_model][flavour]
                count_m += val


    m_line = '\nüíπ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ: ' + str(count) + '—à—Ç.\n\nüí∞ –í—Å–µ–≥–æ –≤—ã—Ä—É—á–∫–∏: ' + str(count_m)

    bot.send_message(m.chat.id, st_line + '\n' + h_line + m_line)


@bot.message_handler(commands=["storage"])
def storage_cm(m, ):
    cock = []
    count = 0
    try:
        if st == {}:
            bot.send_message(m.chat.id, '–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç!')
            return
    except KeyError:
        bot.send_message(m.chat.id, '–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç!')
        return

    for st_model in list(st.keys()):
        for flavour in list(st[st_model].keys()):
            val = st[st_model][flavour]
            count += val
            line = st_model + flavour + str(val)
            cock.append(line)
    rusificate_gencock(cock)
    bot.send_message(m.chat.id, '–°–µ–π—á–∞—Å –Ω–∞ —Å–∫–ª–∞–¥–µ:\n' + genhands(cock) + '\n üñäÔ∏è –í—Å–µ–≥–æ: ' + str(count) + ' —à—Ç.')


@bot.message_handler(commands=["getcache"])
def storage_cb(m, ):
    storage_cm(m)
    del_model(m)
    json_load_d()

    line = d.get('Model')
    if line is None:
        msg = bot.reply_to(m, '–°–∫–ª–∞–¥ –ø—É—Å—Ç')
        bot.register_next_step_handler(msg, storage_new_model)
        return

    msg = bot.reply_to(m, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: \n0. –û—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç –≤–∫—É—Å–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π' + genlist(line) + str(
        len(d.get('Model')) + 1) + '. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å.\n' + str(
        len(d.get('Model')) + 2) + '. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–∫—É—Å.')
    bot.register_next_step_handler(msg, storage_model)


def storage_model(m, ):
    del_cache(m)
    create_cache(m)
    edit_cache(m, m.text)
    if (get_cache(m).isdigit() is False) or (int(get_cache(m)) > (len(d.get('Model'))) + 2):
        bot.reply_to(m, '‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ')
        del_cache(m)
        del_cache1(m)
        return
    elif int(get_cache(m)) == (len(d.get('Model'))) + 1:
        msg = bot.reply_to(m, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏.\n\n–ü—Ä–∏–º–µ—Ä:\n\"Quvie_Air_\" (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫)')
        bot.register_next_step_handler(msg, storage_new_model)
        return
    elif int(m.text) == ((len(d.get('Model'))) + 2):
        msg = bot.reply_to(m, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∫—É—Å–∞.\n\n–ü—Ä–∏–º–µ—Ä:\n\"Apple_\" (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫)')
        bot.register_next_step_handler(msg, storage_new_flavour)
        return
    elif int(m.text) == 0:
        msg = bot.reply_to(m,
                           '–£–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∫—É—Å—ã –∏ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –∏ –Ω–∞ —Å–∫–ª–∞–¥–µ?\n1. –î–∞.\n2. –ù–µ—Ç.')
        bot.register_next_step_handler(msg, storage_clear)
        return

    try:
        if st[d.get('Model')[int(get_cache(m)) - 1]] is dict:
            pass
    except KeyError:
        st[d.get('Model')[int(get_cache(m)) - 1]] = {}
        json_save_st()

    line = d.get('Rus_Flavours')

    msg = bot.reply_to(m, '–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∫—É—Å–∞\n' + genlist(line))
    bot.register_next_step_handler(msg, storage_flavours)


def storage_flavours(m, ):
    global d
    create_cache1(m)
    edit_cache1(m, m.text)
    if (get_cache1(m).isdigit() is False) or (int(get_cache1(m)) > len(d.get('Flavours'))) or (int(get_cache1(m)) == 0):
        bot.reply_to(m, '‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∫—É—Å–∞\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ')
        del_cache(m)
        del_cache1(m)
        return

    try:
        if st[d.get('Model')[int(get_cache(m)) - 1]][d.get('Flavours')[int(get_cache1(m)) - 1]] is dict:
            pass
    except KeyError:
        st[d.get('Model')[int(get_cache(m)) - 1]][d.get('Flavours')[int(get_cache1(m)) - 1]] = 0
        json_save_st()

    msg = bot.reply_to(m, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ:')
    bot.register_next_step_handler(msg, storage_amount)


def storage_amount(m, ):
    model_st = d.get('Model')[int(get_cache(m)) - 1]
    edit_cache(m, m.text)

    if get_cache(m).isdigit() is False:
        bot.reply_to(m, '‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ')
        del_cache(m)
        del_cache1(m)
        return
    if int(get_cache(m)) == 0:
        del st[model_st]
        json_save_st()
    else:
        st[model_st][d.get('Flavours')[int(get_cache1(m)) - 1]] = int(get_cache(m))
    json_save_st()
    bot.reply_to(m, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–∫ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞  ' + get_cache(m) + '—à—Ç.')

    del_model(m)


def storage_new_model(m, ):
    new_name = m.text
    if str(new_name)[-1] != '_':
        new_name = new_name + '_'
    if ' ' in new_name:
        new_name = new_name.replace(' ', '_')
    d['Model'].append(str(new_name))
    json_save_d()
    bot.reply_to(m,
                 '–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º ' + new_name)
    del_cache(m)


def storage_new_flavour(m, ):
    new_name = m.text
    if str(new_name)[-1] != '_':
        new_name = new_name + '_'
    if ' ' in new_name:
        new_name = new_name.replace(' ', '')
    d['Flavours'].append(str(new_name))
    msg = bot.reply_to(m,
                       '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è ' + new_name)
    bot.register_next_step_handler(msg, storage_new_flavour_rus)


def storage_new_flavour_rus(m, ):
    new_name = m.text
    if str(new_name)[0] != '(':
        new_name = '(' + new_name
    if str(new_name)[-1] != ')':
        new_name = new_name + ')'
    if str(new_name)[-1] != '_':
        new_name = new_name + '_'
    if ' ' in new_name:
        new_name = new_name.replace(' ', '_')
    d['Rus_Flavours'].append(str(new_name))
    json_save_d()
    del_cache(m)
    bot.reply_to(m, '–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º ' + new_name)


def storage_clear(m, ):
    global d
    global st
    if int(m.text) == 1:
        d = {"Model": [], "Flavours": [], "Rus_Flavours": []}
        st = {}
        json_save_st()
        json_save_d()
        del_cache(m)
        bot.reply_to(m, '–í—ã –¥–∞—É–Ω.')
    else:
        bot.reply_to(m, '–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        del_cache(m)


@bot.message_handler(commands=["take"])
def take_cb(m, ):
    storage_cm(m)  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–∫–ª–∞–¥
    del_model(m)  # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫—ç—à –º–æ–¥–µ–ª–∏
    line = list(st.keys())  # –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    for i in range(len(line)):  # —É–¥–∞–ª—è–µ–º '_' –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π
        line[i] = line[i].replace('_', ' ')
    msg = bot.reply_to(m, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏: \n' + genlist(line))  # –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π
    # try:
    #     if hd[get_user_id(m)] is dict:  # –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª–∞–¥–∫–∞ –≤ hands.json
    #         pass  # –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    # except KeyError:
    #     hd[get_user_id(m)] = {}  # –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    #     json_save_hd()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .json
    bot.register_next_step_handler(msg, model)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–∏—Å–∏ –Ω–æ–º–µ—Ä–∞ –º–æ–¥–µ–ª–∏


def model(m, ):
    create_cache(m)  # —Å–æ–∑–¥–∞–µ–º –∫—ç—à –¥–ª—è –Ω–æ–º–µ—Ä–∞ –º–æ–¥–µ–ª–∏
    edit_cache(m, m.text)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫—ç—à –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏
    line = list(st.keys())  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    if (get_cache(m).isdigit() is False) or (int(get_cache(m)) > len(line)) or (
            int(get_cache(m)) == 0):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ –≤ —Å–ø–∏—Å–∫–µ
        bot.reply_to(m, '‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ')
        del_cache(m)  # –µ—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç —É–¥–∞–ª—è–µ–º –∫—ç—à
        return
    create_model(m)  # —Å–æ–∑–¥–∞–µ–º –∫—ç—à –º–æ–¥–µ–ª–∏
    edit_model(m, line[int(get_cache(m)) - 1])  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–æ–¥–µ–ª—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    edit_cache(m, line[int(get_cache(m)) - 1])  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    line = list(st[get_cache(m)].keys())  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤
    rusificate(line)  # —Ä—É—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤
    for i in range(len(line)):  # –∑–∞–º–µ–Ω—è–µ–º '_' –Ω–∞ –ø—Ä–æ–±–µ–ª–º—ã
        line[i] = line[i].replace('_', ' ')
    msg = bot.reply_to(m, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∫—É—Å–∞:\n' + genlist(line))  # –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤

    # try:
    #     if hd[get_user_id(m)][get_cache(m)] is dict:  # —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ hd['2345432'][CuvieAir]?
    #         pass
    # except KeyError:
    #     hd[get_user_id(m)][get_cache(m)] = {}  # –µ—Å–ª–∏ –Ω–µ—Ç -- —Å–æ–∑–¥–∞–µ–º(–∑–∞—á–µ–º?) TODO –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    #     json_save_hd()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .json

    bot.register_next_step_handler(msg, flavours)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–∏—Å–∏ –Ω–æ–º–µ—Ä–∞ –≤–∫—É—Å–∞


def flavours(m, ):
    create_cache1(m)  # —Å–æ–∑–¥–∞–µ–º –¥–æ–ø. –∫—ç—à
    edit_cache1(m, m.text)  # –∏–∑–º–µ–Ω—è–µ–º –¥–æ–ø. –∫—ç—à –Ω–∞ –Ω–æ–º–µ—Ä –≤–∫—É—Å–∞
    line = list(st[get_cache(m)].keys())  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ –≤–∫—É—Å–∞–º–∏ –¥–ª—è –Ω—É–∂–Ω–æ–π –º–æ–¥–µ–ª–∏
    if (get_cache1(m).isdigit() is False) or (int(get_cache1(m)) > len(line)) or (
            int(get_cache1(m)) == 0):  # –ø–æ–ø–∞–¥–∞–µ–º –ª–∏ –¥–æ–ø. –∫—ç—à –≤ –Ω–æ–º–µ—Ä –≤–∫—É—Å–∞?
        bot.reply_to(m, '‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∫—É—Å–∞\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ')
        del_cache(m)  # –µ—Å–ª–∏ –Ω–µ—Ç -- —É–¥–∞–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏
        del_cache1(m)  # —É–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –≤–∫—É—Å–∞
        del_model(m)  # —É–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å
        return

    edit_model(m, line[int(get_cache1(m)) - 1])  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–æ–¥–µ–ª—å –≤–∫—É—Å
    edit_cache1(m, line[int(get_cache1(m)) - 1])  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫—ç—à1 –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∫—É—Å–∞

    # try:
    #     if hd[get_user_id(m)][get_cache(m)][get_cache1(m)] is dict:  # —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ hd[234432][CuvieAir][Strawberry]?
    #         pass
    # except KeyError:
    #     hd[get_user_id(m)][get_cache(m)][
    #         get_cache1(m)] = 0  # –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é TODO –∑–∞—á–µ–º?
    #     json_save_hd()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .json
    msg = bot.reply_to(m, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—è—Ç—ã—Ö –æ–¥–Ω–æ—Ä–∞–∑–æ–∫:')
    bot.register_next_step_handler(msg, amount)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –∑–∞–ø–∏—Å–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∑—è—Ç—ã—Ö –æ–¥–Ω–æ—Ä–∞–∑–æ–∫


def amount(m, ):
    if m.text.isdigit() is False or (int(m.text) == 0):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        bot.reply_to(m, '‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–æ–¥–µ–ª–µ–π\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ')
        # msg = bot.reply_to(m, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ')
        del_cache(m)  # —É–¥–∞–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        del_cache1(m)  # —É–¥–∞–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∫—É—Å–∞
        del_model(m)  # —É–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å
        return

    try:
        if hd[get_user_id(m)] is dict:  # –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª–∞–¥–∫–∞ –≤ hands.json
            pass  # –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    except KeyError:
        hd[get_user_id(m)] = {}  # –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        json_save_hd()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .json

    try:
        if hd[get_user_id(m)][get_cache(m)] is dict:  # —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ hd['2345432'][CuvieAir]?
            pass
    except KeyError:
        hd[get_user_id(m)][get_cache(m)] = {}  # –µ—Å–ª–∏ –Ω–µ—Ç -- —Å–æ–∑–¥–∞–µ–º(–∑–∞—á–µ–º?)
        json_save_hd()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .json

    try:
        if hd[get_user_id(m)][get_cache(m)][get_cache1(m)] is dict:  # —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ hd[234432][CuvieAir][Strawberry]?
            pass
    except KeyError:
        hd[get_user_id(m)][get_cache(m)][
            get_cache1(m)] = 0  # –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é T
        json_save_hd()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .json

    if st[get_cache(m)][get_cache1(m)] == int(m.text):  # –µ—Å–ª–∏ –±–µ—Ä–µ–º –º–æ–¥–µ–ª–µ–π —Å—Ç–æ–ª—å–∫–æ –∂–µ —Å–∫–æ–ª—å–∫–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        del st[get_cache(m)][get_cache1(m)]  # —É–¥–∞–ª—è–µ–º st[CuvieAir][Strawberry] –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        json_save_st()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .json
        if st[get_cache(m)] == {}:  # –µ—Å–ª–∏ st[CuvieAir] –ø—É—Å—Ç–æ–µ
            del st[get_cache(m)]  # —É–¥–∞–ª—è–µ–º –µ–≥–æ
            json_save_st()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .json
    elif st[get_cache(m)][get_cache1(m)] < int(m.text):  # –µ—Å–ª–∏ –±–µ—Ä–µ–º –±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ
        bot.reply_to(m, '‚ùå–í—ã –ø—Ä–æ—Å–∏—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ!')
        del_cache(m)  # —É–¥–∞–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        del_cache1(m)  # —É–¥–∞–ª—è–µ–º –≤–∫—É—Å –º–æ–¥–µ–ª–∏
        del_model(m)  # —É–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å
        return
    else:
        st[get_cache(m)][get_cache1(m)] -= int(m.text)  # –µ—Å–ª–∏ –≤—Å–µ –Ω–æ—Ä–º —Ç–æ –≤—ã—á–∏—Ç–∞–µ–º —Å–æ —Å–∫–ª–∞–¥–∞ –≤–∑—è—Ç—ã—Ö –æ–¥–Ω–æ—Ä–∞–∑–∫–∏
        json_save_st()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .json

    hd[get_user_id(m)][get_cache(m)][get_cache1(m)] = hd[get_user_id(m)][get_cache(m)][get_cache1(m)] + int(m.text)
    # –≤ —Å—Ç—Ä–æ—á–∫–µ —Å–≤–µ—Ä—Ö—É –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–∂–µ –≤–∑—è—Ç—ã—Ö –æ–¥–Ω–æ—Ä–∞–∑–æ–∫ –Ω–æ–≤—ã–µ
    json_save_hd()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .json

    bot.reply_to(m, f'–≤—ã –≤–∑—è–ª–∏ {m.text} –æ–¥–Ω–æ—Ä–∞–∑–æ–∫ –Ω–∞ —Ä—É–∫–∏!')
    post_take(m, m.text)  # —Ç—É—Ç –±–æ—Ç –æ—Ç—Å—ã–ª–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–∫ –≤–∑—è–ª–∏ –∏ –ø–æ—Å—Ç–∏—Ç –≤ –∫–∞–Ω–∞–ª https://t.me/+r1p8ASGylO8xMzVi


@bot.message_handler(commands=["sell"])
def sell_cb(m, ):
    hand_cm(m)
    try:
        if hd[get_user_id(m)] is dict:
            pass
    except KeyError:
        return

    create_model(m)
    del_cache(m)
    line = list(hd[get_user_id(m)].keys())

    msg = bot.reply_to(m, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: \n' + gensell(line))

    bot.register_next_step_handler(msg, s_model)


def s_model(m, ):
    create_cache(m)
    edit_cache(m, m.text)

    if (get_cache(m).isdigit() is False) or int(get_cache(m)) > len(list(hd[get_user_id(m)].keys())) or int(
            get_cache(m)) == 0:
        bot.reply_to(m, '‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ')
        del_cache(m)
        del_model(m)
        return

    line = list(hd[get_user_id(m)].keys())
    edit_cache(m, line[int(get_cache(m)) - 1])
    edit_model(m, get_cache(m))
    line = list(hd[get_user_id(m)][get_cache(m)].keys())
    rusificate(line)
    msg = bot.reply_to(m, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∫—É—Å–∞:\n' + gensell(line))
    bot.register_next_step_handler(msg, s_flavours)


def s_flavours(m, ):
    create_cache1(m)
    edit_cache1(m, m.text)
    if (get_cache1(m).isdigit() is False) or int(get_cache1(m)) > len(
            list(hd[get_user_id(m)][get_cache(m)].keys())) or int(get_cache1(m)) == 0:
        bot.reply_to(m, '‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∫—É—Å–∞\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ')
        del_cache(m)
        del_model(m)
        return

    line = list(hd[get_user_id(m)][get_cache(m)].keys())
    edit_cache1(m, line[int(get_cache1(m)) - 1])
    edit_model(m, get_cache1(m))
    msg = bot.reply_to(m, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ—Ä–∞–∑–æ–∫:')
    bot.register_next_step_handler(msg, s_amount)


def s_amount(m, ):
    # if get_cache(m).isdigit() is False or int(get_cache(m)) == 0:
    #     bot.reply_to(m, '‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ')
    #     del_cache(m)
    #     del_cache1(m)
    #     return
    #
    # if int(get_cache(m)) > hd[get_user_id(m)][Model][Flavour]:
    #     bot.reply_to(m, '–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É–∫–∞—Ö!')
    # elif int(get_cache(m)) == hd[get_user_id(m)][Model][Flavour]:
    #     del hd[get_user_id(m)][Model][Flavour]
    #     json_save_hd()
    # else:
    #     hd[get_user_id(m)][Model][Flavour] -= int(get_cache(m))
    #     json_save_hd()
    # msg = bot.reply_to(m, f'–°–∫–æ–ª—å–∫–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —Å {get_cache(m)} –æ–¥–Ω–æ—Ä–∞–∑–æ–∫ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏?')
    #
    # # user_id_sell = 'sell_' + get_user_id(m) + '_'
    # # user_id_sell_model = user_id_sell + get_model(m)
    # #
    # # if search(user_id_sell_model) == 1:
    # #     add(user_id_sell_model, get_cache(m))
    # # else:
    # #     create(user_id_sell_model)
    # #     edit(user_id_sell_model, get_cache(m))

    try:
        if se[get_user_id(m)] is dict:  # –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª–∞–¥–∫–∞ –≤ hands.json
            pass  # –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    except KeyError:
        se[get_user_id(m)] = {}  # –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        json_save_se()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .json

    try:
        if se[get_user_id(m)][get_cache(m)] is dict:  # —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ hd['2345432'][CuvieAir]?
            pass
    except KeyError:
        se[get_user_id(m)][get_cache(m)] = {}  # –µ—Å–ª–∏ –Ω–µ—Ç -- —Å–æ–∑–¥–∞–µ–º(–∑–∞—á–µ–º?)
        json_save_se()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .json

    try:
        if se[get_user_id(m)][get_cache(m)][get_cache1(m)] is dict:  # —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ hd[234432][CuvieAir][Strawberry]?
            pass
    except KeyError:
        se[get_user_id(m)][get_cache(m)][
            get_cache1(m)] = 0  # –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é T
        json_save_se()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .json

    if hd[get_user_id(m)][get_cache(m)][get_cache1(m)] == int(
            m.text):  # –µ—Å–ª–∏ –±–µ—Ä–µ–º –º–æ–¥–µ–ª–µ–π —Å—Ç–æ–ª—å–∫–æ –∂–µ —Å–∫–æ–ª—å–∫–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        del hd[get_user_id(m)][get_cache(m)][get_cache1(m)]  # —É–¥–∞–ª—è–µ–º st[CuvieAir][Strawberry] –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        json_save_hd()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .json
        if hd[get_user_id(m)][get_cache(m)] == {}:  # –µ—Å–ª–∏ st[CuvieAir] –ø—É—Å—Ç–æ–µ
            del hd[get_user_id(m)][get_cache(m)]  # —É–¥–∞–ª—è–µ–º –µ–≥–æ
            json_save_hd()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .json
    elif hd[get_user_id(m)][get_cache(m)][get_cache1(m)] < int(m.text):  # –µ—Å–ª–∏ –±–µ—Ä–µ–º –±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ
        bot.reply_to(m, '‚ùå–í—ã –ø—Ä–æ—Å–∏—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å –Ω–∞ —Ä—É–∫–∞—Ö!')
        del_cache(m)  # —É–¥–∞–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        del_cache1(m)  # —É–¥–∞–ª—è–µ–º –≤–∫—É—Å –º–æ–¥–µ–ª–∏
        del_model(m)  # —É–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å
        return
    else:
        hd[get_user_id(m)][get_cache(m)][get_cache1(m)] -= int(
            m.text)  # –µ—Å–ª–∏ –≤—Å–µ –Ω–æ—Ä–º —Ç–æ –≤—ã—á–∏—Ç–∞–µ–º —Å–æ —Å–∫–ª–∞–¥–∞ –≤–∑—è—Ç—ã—Ö –æ–¥–Ω–æ—Ä–∞–∑–∫–∏
        json_save_hd()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .json

    se[get_user_id(m)][get_cache(m)][get_cache1(m)] = se[get_user_id(m)][get_cache(m)][get_cache1(m)] + int(m.text)
    # –≤ —Å—Ç—Ä–æ—á–∫–µ —Å–≤–µ—Ä—Ö—É –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–∂–µ –≤–∑—è—Ç—ã—Ö –æ–¥–Ω–æ—Ä–∞–∑–æ–∫ –Ω–æ–≤—ã–µ
    json_save_se()

    msg = bot.reply_to(m, f'–°–∫–æ–ª—å–∫–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —Å {m.text} –æ–¥–Ω–æ—Ä–∞–∑–æ–∫ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏?')
    bot.register_next_step_handler(msg, s_money)


def s_money(m, ):
    if m.text.isdigit() is False:
        msg = bot.reply_to(m, '‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ')
        del_cache(m)
        bot.register_next_step_handler(msg, s_money)
        return

    try:
        if mo[get_user_id(m)] is dict:  # –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª–∞–¥–∫–∞ –≤ hands.json
            pass  # –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    except KeyError:
        mo[get_user_id(m)] = {}  # –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        json_save_mo()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .json

    try:
        if mo[get_user_id(m)][get_cache(m)] is dict:  # —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ hd['2345432'][CuvieAir]?
            pass
    except KeyError:
        mo[get_user_id(m)][get_cache(m)] = {}  # –µ—Å–ª–∏ –Ω–µ—Ç -- —Å–æ–∑–¥–∞–µ–º(–∑–∞—á–µ–º?)
        json_save_mo()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .json

    try:
        if mo[get_user_id(m)][get_cache(m)][get_cache1(m)] is dict:  # —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ hd[234432][CuvieAir][Strawberry]?
            pass
    except KeyError:
        mo[get_user_id(m)][get_cache(m)][
            get_cache1(m)] = 0  # –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é T
        json_save_mo()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .json

    mo[get_user_id(m)][get_cache(m)][get_cache1(m)] = mo[get_user_id(m)][get_cache(m)][get_cache1(m)] + int(m.text)
    # –≤ —Å—Ç—Ä–æ—á–∫–µ —Å–≤–µ—Ä—Ö—É –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–∂–µ –≤–∑—è—Ç—ã—Ö –æ–¥–Ω–æ—Ä–∞–∑–æ–∫ –Ω–æ–≤—ã–µ
    json_save_mo()

    bot.reply_to(m, f'üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –∫–∞–∑–Ω—É –º—Å—Ç–∏—Ç–µ–ª–µ–π –Ω–∞ {m.text} —Ä—É–±. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!')


backup()
bot.polling(none_stop=True, interval=0)
